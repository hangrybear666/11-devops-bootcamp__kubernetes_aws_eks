#!/user/bin/env groovy

library identifier: ' 08-devops-bootcamp__jenkins@main', retriever: modernSCM(
    scm: [$class: 'GitSCMSource',
    credentialsId: 'git-creds',
    remote: 'https://github.com/hangrybear666/08-devops-bootcamp__jenkins.git',
    traits: [gitBranchDiscovery()]],
    libraryPath: 'jenkins-shared-library/')
def groovyScript

pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    environment {
        DOCKER_HUB_REPO_URL='hangrybear666/personal-imgs'
        AWS_ECR_REPO_URL='010928217051.dkr.ecr.eu-central-1.amazonaws.com/k8s-imgs'
        AWS_IAM_AUTH_IMAGE_NAME='aws-iam-auth-k8s-0'
        AWS_IAM_AUTH_IMAGE_TAG="${env.AWS_ECR_REPO_URL}:${env.AWS_IAM_AUTH_IMAGE_NAME}.${env.BUILD_ID}"
    }
    stages {
        stage('init workspace') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'aws-iam-authenticator-config', variable: 'SECRET_FILE')]) {
                        sh 'mkdir -p .kube'
                        sh 'touch .kube/config'
                        sh 'cat $SECRET_FILE > .kube/config'
                    }
                }
            }
        }
        stage('Build AWS & K8S Image') {
            steps {
                script{
                    def awsIamAuthImg = docker.build("${env.AWS_IAM_AUTH_IMAGE_TAG}", "-f ./Dockerfile .")

                    docker.withRegistry("https://${env.AWS_ECR_REPO_URL}",'aws-ecr-creds') {
                        awsIamAuthImg.push()
                    }
                }
            }
        }
        stage('increment version') {
            steps {
                dir("java-app") {
                    script {
                        echo 'incrementing app version...'
                        sh 'mvn build-helper:parse-version versions:set \
                            -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                            versions:commit'
                        def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                        def version = matcher[0][1]
                        env.VERSION_NUM = "$version-$BUILD_NUMBER"
                    }
                }
            }
        }
        stage('build app') {
            steps {
                dir("java-app") {
                    script {
                        // using jenkins shared library groovy scripts in /jenkins-shared-library/vars
                        buildJar()
                    }
                }
            }
        }
        stage('build image') {
            steps {
                dir("java-app") {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', usernameVariable: 'USER', passwordVariable: 'PASS')]){
                            // using jenkins shared library groovy scripts extended themselves by a groovy Docker class in /jenkins-shared-library
                            buildImage("${env.DOCKER_HUB_REPO_URL}", "${env.VERSION_NUM}")
                            dockerLogin()
                            dockerPush()
                        }
                    }
                }
            }
        }
        stage('deploy to k8s') {
            environment {
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            }
            agent {
                docker {
                    image "${env.AWS_IAM_AUTH_IMAGE_TAG}"
                    registryUrl "https://${env.AWS_ECR_REPO_URL}"
                    registryCredentialsId 'aws-ecr-creds'
                    args "-v ${WORKSPACE}:/home/cli-user -e AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}"
                }
            }
            steps {
                script {
                    sh """
                    kubectl apply -f nginx-deployment.yaml --kubeconfig .kube/config
                    """
                }
            }
        }
        stage('commit version update'){
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'git-creds', passwordVariable: 'PASS', usernameVariable: 'USER')]){
                        sh 'git config --global user.email "jenkins@example.com"'
                        sh 'git config --global user.name "jenkins"'

                        sh "git remote set-url origin https://${USER}:${PASS}@github.com/hangrybear666/11-devops-bootcamp__kubernetes_aws_eks.git"
                        sh 'git add .'
                        sh 'git commit -m "Jenkins Bot: java-app version bump"'
                        sh 'git push origin HEAD:jenkins-jobs'
                    }
                }
            }
        }
    }
}

